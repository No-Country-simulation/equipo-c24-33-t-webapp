openapi: 3.0.0
info:
  title: API de Autenticación, Productos y Categorías
  version: 1.0.0
  description: API que maneja autenticación de usuarios, gestión de productos y categorías.

servers:
  - url: /api
    description: Servidor local

paths:
  /auth/register:
    post:
      summary: Registra un nuevo usuario
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
      responses:
        "201":
          description: Usuario registrado correctamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          description: Error de validación o usuario ya existente

  /auth/login:
    post:
      summary: Inicia sesión
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginInput"
      responses:
        "200":
          description: Inicio de sesión exitoso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "401":
          description: Credenciales inválidas

  /auth/me:
    get:
      summary: Obtiene la información del usuario autenticado
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Información del usuario
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: No autenticado

  /products:
    get:
      summary: Obtiene la lista de productos
      tags:
        - Products
      responses:
        "200":
          description: Lista de productos obtenida correctamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"

    post:
      summary: Crea un nuevo producto
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductInput"
      responses:
        "201":
          description: Producto creado exitosamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"

  /products/{id}:
    get:
      summary: Obtiene un producto por ID
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Producto encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404":
          description: Producto no encontrado

    patch:
      summary: Actualiza un producto por ID
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductInput"
      responses:
        "200":
          description: Producto actualizado correctamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404":
          description: Producto no encontrado

    delete:
      summary: Elimina un producto por ID
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Producto eliminado correctamente
        "404":
          description: Producto no encontrado

  /categories:
    get:
      summary: Obtiene la lista de categorías
      tags:
        - Categories
      responses:
        "200":
          description: Lista de categorías obtenida correctamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"

    post:
        summary: Crea una nueva categoría
        tags:
          - Categories
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryInput"
        responses:
          "201":
            description: Categoría creada exitosamente
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Category"

  /categories/{id}:
    put:
      summary: Actualiza una categoría por ID
      tags:
        - Categories
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryInput"
      responses:
        "200":
          description: Categoría actualizada exitosamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "404":
          description: Categoría no encontrada

    delete:
      summary: Elimina una categoría por ID
      tags:
        - Categories
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Categoría eliminada exitosamente
        "404":
          description: Categoría no encontrada
          

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string

    UserInput:
      type: object
      properties:
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          example: "user@example.com"
        password:
          type: string
          example: "password123"

    LoginInput:
      type: object
      properties:
        email:
          type: string
          example: "user@example.com"
        password:
          type: string
          example: "password123"

    AuthResponse:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        token:
          type: string

    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        price:
          type: number
        quantity:
          type: integer
        category:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string

    ProductInput:
      type: object
      properties:
        name:
          type: string
          example: "Laptop"
        price:
          type: number
          example: 1200.50
        quantity:
          type: integer
          example: 10
        categoryId:
          type: integer
          example: 1

    Category:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        products:
          type: array
          items:
            $ref: "#/components/schemas/Product"

    CategoryInput:
      type: object
      properties:
        name:
          type: string
          example: "Electronics"

securitySchemes:
  BearerAuth:
    type: http
    scheme: bearer
    bearerFormat: JWT
